namespace contractdsl

// Stub for the built-in Rosetta `date` type.
type Date:
    day int (1..1)
    month int (1..1)
    year int (1..1)

// Stub of the CDM DateDifference.
func DateDifference:
    inputs:
		firstDate Date (0..1) // should be (1..1), but type checker is not smart enough.
		secondDate Date (0..1)
	output:
		difference int (1..1)
	assign-output:
	    42 // dummy value


// Stub of the CDM UnitType.
type Currency:
type EUR extends Currency:
type USD extends Currency:

type ConstObservable:
	val number (1..1)

type TimeObservable:
	time Date (1..1)

type Observable:
	const ConstObservable (0..1)
	time TimeObservable (0..1)

func Observe:
	inputs:
		observable Observable (1..1)
		time Date (1..1)
	output:
		result number (0..1) // should be (1..1), but type checker is not smart enough.
	
	assign-output:
		if observable->const exists then observable->const->val
		else if observable->time exists then DateDifference(observable->time->time, time)

func Const:
  inputs:
    constant number (1..1)
  output:
    observable Observable (1..1)
  assign-output:
    Observable {
    	const: ConstObservable { val: constant },
    	time: empty
    }

type Contract:
  zero       Contract_Zero       (0..1)
  expired    Contract_Expired    (0..1)
  one        Contract_One        (0..1)
  orContract Contract_Or         (0..1)
  both       Contract_Both       (0..1)
  give       Contract_Give       (0..1)
  thereafter Contract_Thereafter (0..1)
  truncate   Contract_Truncate   (0..1)
  observe    Contract_Observe    (0..1)
  get        Contract_Get        (0..1)
  anytime    Contract_Anytime    (0..1)

type Contract_Zero:
type Contract_Expired:
type Contract_One:
  currency Currency (1..1)
type Contract_Or:
  left Contract (1..1)
  right Contract (1..1)
type Contract_Both:
  left Contract (1..1)
  right Contract (1..1)
type Contract_Give:
  contract Contract (1..1)
type Contract_Thereafter:
  earlier Contract (1..1)
  later   Contract (1..1)
type Contract_Truncate:
  expiryDate Date     (1..1)
  contract   Contract (1..1)
type Contract_Observe:
  observable Observable (1..1)
  contract Contract (1..1)
type Contract_Get:
  contract Contract (1..1)
type Contract_Anytime:
  contract Contract (1..1)


func MkZero:
  inputs:
  output:
    contract Contract (1..1)
  assign-output:
    Contract {
    	zero: Contract_Zero {},
    	expired: empty, one: empty, orContract: empty, both: empty, give: empty,
    	thereafter: empty, truncate: empty, observe: empty, get: empty, anytime: empty
    }

func MkExpired:
  inputs:
  output:
    contract Contract (1..1)
  assign-output:
    Contract {
    	expired: Contract_Expired {},
    	zero: empty, one: empty, orContract: empty, both: empty, give: empty,
    	thereafter: empty, truncate: empty, observe: empty, get: empty, anytime: empty
    }

func MkOne:
  inputs:
    currency Currency (1..1)
  output:
    contract Contract (1..1)
  assign-output:
    Contract {
    	one: Contract_One { currency: currency },
    	zero: empty, expired: empty, orContract: empty, both: empty, give: empty,
    	thereafter: empty, truncate: empty, observe: empty, get: empty, anytime: empty
    }

func MkOr:
  inputs:
    left  Contract (1..1)
    right Contract (1..1)
  output:
    contract Contract (1..1)
  assign-output:
    Contract {
    	orContract: Contract_Or { left: left, right: right },
    	zero: empty, expired: empty, one: empty, both: empty, give: empty,
    	thereafter: empty, truncate: empty, observe: empty, get: empty, anytime: empty
    }

func MkBoth:
  inputs:
    left  Contract (1..1)
    right Contract (1..1)
  output:
    contract Contract (1..1)
  assign-output:
    Contract {
    	both: Contract_Both { left: left, right: right },
    	zero: empty, expired: empty, one: empty, orContract: empty, give: empty,
    	thereafter: empty, truncate: empty, observe: empty, get: empty, anytime: empty
    }

func MkGive:
  inputs:
    subContract Contract (1..1)
  output:
    contract Contract (1..1)
  assign-output:
    Contract {
    	give: Contract_Give { contract: subContract },
    	zero: empty, expired: empty, one: empty, orContract: empty, both: empty,
    	thereafter: empty, truncate: empty, observe: empty, get: empty, anytime: empty
    }

func MkThereafter:
  inputs:
    earlier  Contract (1..1)
    later Contract (1..1)
  output:
    contract Contract (1..1)
  assign-output:
    Contract {
    	thereafter: Contract_Thereafter { earlier: earlier, later: later },
    	zero: empty, expired: empty, one: empty, orContract: empty, both: empty,
    	give: empty, truncate: empty, observe: empty, get: empty, anytime: empty
    }

func MkTruncate:
  inputs:
    truncateTo Date      (1..1)
    subContract Contract (1..1)
  output:
    contract Contract (1..1)
  assign-output:
    Contract {
    	truncate: Contract_Truncate { expiryDate: truncateTo, contract: subContract },
    	zero: empty, expired: empty, one: empty, orContract: empty, both: empty,
    	give: empty, thereafter: empty, observe: empty, get: empty, anytime: empty
    }

func MkObserve:
  inputs:
    observable Observable (1..1)
    subContract Contract (1..1)
  output:
    contract Contract (1..1)
  assign-output:
    Contract {
    	observe: Contract_Observe { observable: observable, contract: subContract },
    	zero: empty, expired: empty, one: empty, orContract: empty, both: empty,
    	give: empty, thereafter: empty, truncate: empty, get: empty, anytime: empty
    }

func MkGet:
  inputs:
    subContract Contract (1..1)
  output:
    contract Contract (1..1)
  assign-output:
    Contract {
    	get: Contract_Get { contract: subContract },
    	zero: empty, expired: empty, one: empty, orContract: empty, both: empty,
    	give: empty, thereafter: empty, truncate: empty, observe: empty, anytime: empty
    }

func MkAnytime:
  inputs:
    subContract Contract (1..1)
  output:
    contract Contract (1..1)
  assign-output:
    Contract {
    	anytime: Contract_Anytime { contract: subContract },
    	zero: empty, expired: empty, one: empty, orContract: empty, both: empty,
    	give: empty, thereafter: empty, truncate: empty, observe: empty, get: empty
    }

func MkAnd:
  inputs:
    left Contract (1..1)
    right Contract (1..1)
  output:
    contract Contract (1..1)
  assign-output:
    MkThereafter(MkBoth(left, right), MkOr(left, right))

func ZeroCouponBond:
  inputs:
    maturesOn Date    (1..1)  // Date the bond matures on
    amount number     (1..1)  // Amount of the bond is worth
    currency Currency (1..1)  // Unit the bond is denoted in
  output:
    contract Contract (1..1)
  assign-output:
    MkGet(MkTruncate(maturesOn, MkObserve(Const(amount), MkOne(currency))))

func Perhaps:
  inputs:
    endDate  Date     (1..1)
    contract Contract (1..1)
  output:
    perhaps Contract (1..1)
  assign-output:
    MkTruncate(endDate, MkOr(contract, MkZero()))

func EuropeanOption:
  inputs:
    endDate  Date     (1..1)
    contract Contract (1..1)
  output:
    option Contract (1..1)
  assign-output:
    MkGet(Perhaps(endDate, contract))

func AmericanOption:
  inputs:
    startDate Date    (1..1)
    endDate   Date    (1..1)
    contract Contract (1..1)
  output:
    option Contract (1..1)
  assign-output:
    MkThereafter(MkGet(MkTruncate(startDate, MkAnytime(Perhaps(endDate, contract)))), MkAnytime(Perhaps(endDate, contract)))
