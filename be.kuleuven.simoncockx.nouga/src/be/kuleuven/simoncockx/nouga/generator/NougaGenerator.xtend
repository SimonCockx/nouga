/*
 * generated by Xtext 2.25.0
 */
package be.kuleuven.simoncockx.nouga.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import be.kuleuven.simoncockx.nouga.nouga.Model
import be.kuleuven.simoncockx.nouga.nouga.Data
import be.kuleuven.simoncockx.nouga.nouga.Function
import com.google.inject.Inject
import be.kuleuven.simoncockx.nouga.nouga.FunctionCallExpression

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class NougaGenerator extends AbstractGenerator {
	@Inject
	extension JavaNameUtil
	@Inject
	extension JavaTypeUtil
	@Inject
	extension JavaExpressionUtil

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		resource.contents.filter(Model).forEach [
			elements.forEach[
				generateRootElement(it, fsa)
			]
		]
	}
	
	def dispatch void generateRootElement(Data data, IFileSystemAccess2 fsa) {
		fsa.generateFile(data.toPath, '''
			package «basePackage»;
			
			«imports»
			
			public class «data.toClassName» {
				«data.attributes.join(System.lineSeparator)['''private «type.toJavaType» «toVarName»;''']»
				
				public «data.toClassName»(«data.attributes.join(',')['''«type.toJavaType» «toVarName»''']») {
					«data.attributes.join(System.lineSeparator)['''this.«toVarName» = «toVarName»;''']»
				}
				
				«FOR attr: data.attributes»
				public «attr.type.toJavaType» «attr.toGetterName»() {
					return this.«attr.toVarName»;
				}
				«ENDFOR»
			}
		''')
	}
	def dispatch void generateRootElement(Function func, IFileSystemAccess2 fsa) {
		fsa.generateFile(func.toPath, '''
			package «functionsPackage»;
			
			«imports»
			
			public class «func.toClassName» {
				«gatherDependencies(func).join(System.lineSeparator)[
				'''@Inject «toClassName» «toVarName»;'''
				]»
				
				public «func.output.type.toJavaType» «evaluationName»() {
					return «func.operation.toJavaExpression»;
				}
			}
		''')
	}
	
	private def gatherDependencies(Function func) {
		func.operation.eAllContents.filter(FunctionCallExpression).map[function]
	}
}
