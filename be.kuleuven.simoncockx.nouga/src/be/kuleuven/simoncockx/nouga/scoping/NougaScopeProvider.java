/*
 * generated by Xtext 2.25.0
 */
package be.kuleuven.simoncockx.nouga.scoping;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

import be.kuleuven.simoncockx.nouga.nouga.Data;
import be.kuleuven.simoncockx.nouga.nouga.Function;
import be.kuleuven.simoncockx.nouga.nouga.NougaPackage;
import be.kuleuven.simoncockx.nouga.nouga.ProjectionExpression;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class NougaScopeProvider extends AbstractNougaScopeProvider {
	@Override
	public IScope getScope(EObject context, EReference reference) {
		if (context instanceof Data && reference == NougaPackage.Literals.DATA__SUPER_TYPE) {
			EObject rootElement = EcoreUtil2.getRootContainer(context);
	        List<Data> candidates = EcoreUtil2.getAllContentsOfType(rootElement, Data.class);
	        return Scopes.scopeFor(candidates);
		} else if (context instanceof ProjectionExpression && reference == NougaPackage.Literals.PROJECTION_EXPRESSION__ATTRIBUTE) {
			ProjectionExpression ctx = (ProjectionExpression)context;
			// TODO
			// typeProvider.getRType(context.receiver)
			// val featureScope = receiverType.createFeatureScope
			// return Scopes.scopeFor(ctx.getReceiver())
		} else if (context instanceof Function && reference == NougaPackage.Literals.VARIABLE_REFERENCE__REFERENCE) {
			Function function = (Function)context;
			return Scopes.scopeFor(function.getInputs());
		}
		return super.getScope(context, reference);
	}
}
